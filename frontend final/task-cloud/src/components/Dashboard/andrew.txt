import React, { useEffect, useState } from 'react';
import { useLocation } from 'react-router-dom';
import {
  createTheme,
  ThemeProvider,
  CssBaseline,
  Box,
  Typography,
  IconButton,
  Container,
  Grid,
  Paper,
} from '@mui/material';
import { Delete as DeleteIcon, Add as AddIcon } from '@mui/icons-material';
import { Task, emptyTask } from '../../constants/dtoTypes';
import Header from './modules/Header';
import TaskDialog from './modules/TaskDialog';
import { deleteTask, fetchTasks } from '../../constants/endpoints';
import { generateTaskId } from '../../constants/utilityFunctions';
import TaskListWithWeather from './modules/TaskListWithWeather';

const defaultTheme = createTheme();

const Dashboard: React.FC = () => {
  const location = useLocation();
  
  //Add Task Dialog
  const [dialogOpen, setDialogOpen] = React.useState(false);
  const [task, setTask] = useState<Task>(emptyTask)

  const [tasks, setTasks] = useState<Task[]>([]);
  
  const { state } = location || {};
  const username = state ? state.username : 'User';
  
  //States for Upcoming Task DashBoard
  const [dynamicDashboardOpen, setDynamicDashboardOpen] = useState(false);
  const [currentTasks, setCurrentTasks] = useState<Task[]>([]);
  
  const handleDeleteTask = (indexToRemove: number) => {
    const foundTask = tasks.find((task, index) => index === indexToRemove);
    if(foundTask) {
      const taskId = generateTaskId(foundTask)
      deleteTask(username, taskId.toString())
    }

    const updatedTasks = tasks.filter((_, index) => index !== indexToRemove);
    setTasks(updatedTasks);
  };

  // const parseTaskDetails = (task: string): Task | null => {
  //   const regexResult = task.match(/⭐ (.+) - Location: (.+) - Date: (\d+)\/(\d+) - Time: (\d+):(\d+) (\w{2})/);
  //   if (regexResult) {
  //     const [ name, location, month, date, hour, minute, amPm] = regexResult;
  //     return {
  //       taskName: name,
  //       taskLocation: location,
  //       taskMonth: month,
  //       taskDate: date,
  //       taskHour: hour,
  //       taskMinute: minute,
  //       taskAmPm: amPm,
  //     };
  //   }
  //   return null;
  // }

  const handleOpenDescription = () => {
    if (tasks.length > 3) {
      setCurrentTasks(tasks.slice(3));
    }
    else {
      setCurrentTasks(tasks)
    }
    setDynamicDashboardOpen(true);
  };

  const handleCloseDescription = () => {
    setDynamicDashboardOpen(false);
  };
  
  const handleAddTask = () => {
    setDialogOpen(true);
  };

  const handleDialogClose = () => {
    setDialogOpen(false);
  };

  const taskToString = (task: Task) => {

    console.log(task);

    const newTask = `⭐ ${task.taskName} - Location: ${task.taskLocation} - Date: ${task.taskMonth}/${task.taskDate} at ${task.taskHour}:${task.taskMinute} ${task.taskAmPm}`;
    
    console.log(newTask);
    return newTask;
  }

  useEffect(() => {
    async function fetchData() {
      try {
          const fetchedTasks = await fetchTasks(username);
          
          // Once the promise is resolved, update the tasks state
          setTasks(fetchedTasks);
      } catch (error) {
          // Handle error as needed
          console.error('Error:', error);
      }
    }

    // Call fetchData function when component mounts
    fetchData();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  return (
    <ThemeProvider theme={defaultTheme}>
      <Box sx={{ display: 'flex' }}>
        <CssBaseline />
        <Header userName={username}/>
        <Box
          component="main"
          sx={{
            backgroundColor: (theme) =>
              theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900],
            flexGrow: 1,
            height: '100vh',
            overflow: 'auto',
            padding: '20px', // Add padding for better aesthetics
          }}
        >
          <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Typography variant="h5" align="center" gutterBottom sx={{ pt: '20px'}}>
                  {username ? `Welcome, ${username}!` : 'Welcome!'}
                </Typography>
                <Box sx={{ maxHeight: 'calc(100vh - 200px)', overflowY: 'auto' }}> {/* Add styles for scrollable box */}
                  {tasks.length === 0 ? (
                    <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>
                      <Typography variant="body1">
                        No current tasks. Click the 'Add Task' button to begin creating a task.
                      </Typography>
                    </Paper>
                  ) : (
                    tasks.map((task, index) => (
                      <Paper
                        sx={{
                          p: 2,
                          mb: 2,
                          display: 'flex',
                          flexDirection: 'column',
                          position: 'relative',
                        }}
                        key={index}
                      >
                        <Typography variant="body1">
                          {taskToString(task).split(' - ').map((line, i) => (
                            <React.Fragment key={i}>
                              {line}
                              <br />
                            </React.Fragment>
                          ))}
                        </Typography>
                        <IconButton
                          color="error"
                          size="small"
                          aria-label="delete"
                          onClick={() => handleDeleteTask(index)}
                          sx={{
                            position: 'absolute',
                            top: '4px',
                            right: '4px',
                          }}
                        >
                          <DeleteIcon />
                        </IconButton>
                      </Paper>
                    ))
                  )}
                </Box>
              </Grid>
            </Grid>
          </Container>
          
          <IconButton
            color="primary"
            aria-label="add task"
            onClick={handleAddTask}
            sx={{
              position: 'fixed',
              left: '50%',
              transform: 'translateX(-50%)'
            }}
          >
            <AddIcon />
            <Typography>Add Task</Typography>
          </IconButton>
          
          <IconButton
            color="primary"
            aria-label="open upcoming tasks"
            onClick={handleOpenDescription}
            sx={{
              position: 'fixed',
              right: 20,
              bottom: 20,
            }}
          >
            <Typography variant="body2">Open Dynamic Dashboard</Typography>
          </IconButton>
          
          <TaskDialog setTask={setTask} dialogOpen={dialogOpen} task={task} handleDialogClose={handleDialogClose} setTasks={setTasks} tasks={tasks} userName={username}/>
          <TaskListWithWeather tasks={currentTasks} open={dynamicDashboardOpen} onClose={handleCloseDescription}/>
        </Box>
      </Box>
    </ThemeProvider>
  );  
};

export default Dashboard;

